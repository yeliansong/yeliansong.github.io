<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>microservice - Tag - LIANSONG&#39;S Blog</title>
        <link>https://yeliansong.github.io/en/tags/microservice/</link>
        <description>microservice - Tag - LIANSONG&#39;S Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>ylsccnu@hotmail.com (LIANSONG&#39;S Blog)</managingEditor>
            <webMaster>ylsccnu@hotmail.com (LIANSONG&#39;S Blog)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 26 Apr 2020 19:00:00 &#43;0800</lastBuildDate><atom:link href="https://yeliansong.github.io/en/tags/microservice/" rel="self" type="application/rss+xml" /><item>
    <title>Cloud Tech,Container And K8S Sharing</title>
    <link>https://yeliansong.github.io/en/2020-4-24-sharing/</link>
    <pubDate>Sun, 26 Apr 2020 19:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2020-4-24-sharing/</guid>
    <description><![CDATA[Part 1: For this part, comprise of the basic knowledges including Cloud history, container technology and k8s etc.
1. Cloud Technology 1.1 The History Of Cloud computing ​	https://skyao.io/learning-cloudnative/introduction/history.html
IaaS: Infrastructure as a service
PaaS: Platform as a service
SaaS: Software as a service
1.2 Cloud Native ​	https://skyao.io/learning-cloudnative/introduction/background.html
1.3 DevOps And Strengths ​ https://www.qikegu.com/docs/4262
​	https://skyao.io/learning-cloudnative/devops/
2. Container Technologies 2.1 Virtualization Technology Virtualization refers to the act of creating a virtual version of something, including virtual computer hardware platforms, storage devices, and computer network resources etc.]]></description>
</item><item>
    <title>Secret And ConfigMap</title>
    <link>https://yeliansong.github.io/en/2020-05-03-secret-and-configmap/</link>
    <pubDate>Wed, 01 Apr 2020 10:11:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2020-05-03-secret-and-configmap/</guid>
    <description><![CDATA[1. Background Up to now, perhaps you haven&rsquo;t had to pass any kind of configuration data to the apps. Because almost all apps require configuration, which shouldn&rsquo;t be baked into to the built app itself. This article shows two ways to pass the configuration data to the apps.
2. Secret Secret is for the information you&rsquo;ve passed to the containers is sensitive. K8s provides a separate object called a Secret. There are 4 ways to create the Secret.]]></description>
</item><item>
    <title>K8S Deployment Strategies</title>
    <link>https://yeliansong.github.io/en/2020-4-22-k8s-deployment-strategies/</link>
    <pubDate>Fri, 27 Mar 2020 10:11:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2020-4-22-k8s-deployment-strategies/</guid>
    <description><![CDATA[1. Background We always deploy the final version applications to the production env. There are several ways to ensure the release production stably and safety. Below sections are k8s deployment strategies.
2. The Strategies There are 4 ways to do the production release. 1) Rolling-update. 2) Recreate. 3) Blue/Green. 4) Canary. Below is the details.
Recreate Update
This is very clumsy way to update. Destory V1 application then create V2 application.]]></description>
</item><item>
    <title>K8S Network</title>
    <link>https://yeliansong.github.io/en/2020-4-23-k8s-network/</link>
    <pubDate>Fri, 13 Mar 2020 16:11:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2020-4-23-k8s-network/</guid>
    <description><![CDATA[K8S network is divided into 3 levels. From inside to outside, there are 3 types: 1) Container Network. 2) Intra-Cluster Network. 3) External Cluster Network. Below is the details,
1. Container Network Docker networking is limited within the host itself. By default, it creates a virtual bridge named docker0 and for each container it allocates a virtual ethane which get attached to the bridge docker0. So, in Docker two containers can communicate with each other if they resident on the same host.]]></description>
</item><item>
    <title>Health Check</title>
    <link>https://yeliansong.github.io/en/2020-4-11-health-check/</link>
    <pubDate>Fri, 28 Feb 2020 09:11:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2020-4-11-health-check/</guid>
    <description><![CDATA[1. About K8S health check Health check is the important feature of the k8s orchestrating. K8s can monitor those containers and automatically restart them if they fail. If the container&rsquo;s main process crashes, the k8s will restart the container. Also if your application has a bug that causes it to crash every once in a while, k8s will restart it automatically.There are two kinds of ways for health check. Liveness and Readiness.]]></description>
</item><item>
    <title>How to write YAML</title>
    <link>https://yeliansong.github.io/en/2020-04-08-how-to-write-the-yaml/</link>
    <pubDate>Sat, 15 Feb 2020 10:11:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2020-04-08-how-to-write-the-yaml/</guid>
    <description><![CDATA[1. How to write the YAML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deploymnet spec: replicas: 3 selector: matchLabels: app: web_server template: metadata: labels: app: web_server spec: containers: - name: nginx image: nginx:1.7.9 Okay, Let us analysis this YAML sample. It used the indentation to represent the layer. Every layer was dependent and called each other.]]></description>
</item><item>
    <title>K8S Deployment</title>
    <link>https://yeliansong.github.io/en/2020-4-25-deployment/</link>
    <pubDate>Tue, 04 Feb 2020 10:11:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2020-4-25-deployment/</guid>
    <description><![CDATA[A Deployment provides declarative updates for Pods and ReplicaSets. We can make use of many Deployment features.
This chapter covers Updating a Deployment, rolling back a Deployment, Scalling a Deployment, Pausing and Resuming a Deployment and Deployment Status.
First, we create a Deployment.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deploymnet spec: replicas: 3 selector: matchLabels: app: web_server template: metadata: labels: app: web_server spec: containers: - name: nginx image: nginx:1.]]></description>
</item><item>
    <title>Volume</title>
    <link>https://yeliansong.github.io/en/2020-4-14-volume/</link>
    <pubDate>Sat, 25 Jan 2020 09:11:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2020-4-14-volume/</guid>
    <description><![CDATA[1. emptyDir It&rsquo;s the basis of Volume. The life cycle depends on the Pod. The volume will be removed when the related Pod was removed. So we can think of it as the path of the Pod. All the containers of the pod share this voiume. Let&rsquo;s show how to setup the volume configure.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 apiVersion: v1 kind: Pod metadata: name: producer-consumer spec: containers: - image: busybox name: producer volumeMounts: - mountPath: /producer_dir name: shared-volume args: - /bin/sh - -c - echo &#34;hello world&#34; &gt; /producer_dir/hello; sleep 30000 - image: busybox name: consumer volumeMounts: - mountPath: /consumer_dir name: shared-volume args: - /bin/sh - -c - cat /consumer_dir/hello; sleep 30000 volumes: - name: shared-volume emptyDir: {} The above file is about configure the volume practice.]]></description>
</item><item>
    <title>Understand The K8S Architecture</title>
    <link>https://yeliansong.github.io/en/2020-3-22-understand-the-k8s-architecture/</link>
    <pubDate>Sat, 04 Jan 2020 09:11:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2020-3-22-understand-the-k8s-architecture/</guid>
    <description><![CDATA[1. k8s components architecture. Okay, it&rsquo;s very easy to understand. Like above, master node is the most important. It controls the other nodes to join the cluster. Also API server is exposed outside. Through the master node, then can arrange the other nodes.
2. Practice Target: Create the k8s cluster, then deploy the application to these 2 nodes. Steps. Use kubeadm init to create the master k8s cluster, then join node1 and node2 to the cluster.]]></description>
</item><item>
    <title>九、Deployment declarative upgrade application</title>
    <link>https://yeliansong.github.io/en/2019-09-16-9-deployment%E5%A3%B0%E6%98%8E%E5%BC%8F%E5%8D%87%E7%BA%A7%E5%BA%94%E7%94%A8/</link>
    <pubDate>Fri, 01 Nov 2019 15:11:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2019-09-16-9-deployment%E5%A3%B0%E6%98%8E%E5%BC%8F%E5%8D%87%E7%BA%A7%E5%BA%94%E7%94%A8/</guid>
    <description><![CDATA[1. Several ways to upgrade Let&rsquo;s look at a case first, how to deal with this situation:
The POD is currently using the V1 version, and now there is a V2 version, how to replace the V2 version with the V1 version? There are three ways:
Delete the old version POD and replace it with the new version POD
This method is more violent. It is to directly modify the configuration template of V1 to V2, and then delete the POD of V1.]]></description>
</item></channel>
</rss>
