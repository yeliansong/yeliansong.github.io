<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>microservice - Tag - LIANSONG&#39;S Blog</title>
        <link>https://yeliansong.github.io/en/tags/microservice/</link>
        <description>microservice - Tag - LIANSONG&#39;S Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>ylsccnu@hotmail.com (LIANSONG&#39;S Blog)</managingEditor>
            <webMaster>ylsccnu@hotmail.com (LIANSONG&#39;S Blog)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 01 Nov 2019 15:11:51 &#43;0800</lastBuildDate><atom:link href="https://yeliansong.github.io/en/tags/microservice/" rel="self" type="application/rss+xml" /><item>
    <title>九、Deployment declarative upgrade application</title>
    <link>https://yeliansong.github.io/en/2019-09-16-9-deployment%E5%A3%B0%E6%98%8E%E5%BC%8F%E5%8D%87%E7%BA%A7%E5%BA%94%E7%94%A8/</link>
    <pubDate>Fri, 01 Nov 2019 15:11:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2019-09-16-9-deployment%E5%A3%B0%E6%98%8E%E5%BC%8F%E5%8D%87%E7%BA%A7%E5%BA%94%E7%94%A8/</guid>
    <description><![CDATA[1. Several ways to upgrade Let&rsquo;s look at a case first, how to deal with this situation:
The POD is currently using the V1 version, and now there is a V2 version, how to replace the V2 version with the V1 version? There are three ways:
Delete the old version POD and replace it with the new version POD
This method is more violent. It is to directly modify the configuration template of V1 to V2, and then delete the POD of V1.]]></description>
</item><item>
    <title>八、Access POD metadata and other resources from applications</title>
    <link>https://yeliansong.github.io/en/2019-09-16-8-%E4%BB%8E%E5%BA%94%E7%94%A8%E8%AE%BF%E9%97%AEpod%E5%85%83%E6%95%B0%E6%8D%AE%E5%8F%8A%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90/</link>
    <pubDate>Sat, 12 Oct 2019 15:11:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2019-09-16-8-%E4%BB%8E%E5%BA%94%E7%94%A8%E8%AE%BF%E9%97%AEpod%E5%85%83%E6%95%B0%E6%8D%AE%E5%8F%8A%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90/</guid>
    <description><![CDATA[1. Downward API passing metadata To be honest, this chapter is also in the clouds, and it feels similar to the environment variable configuration. My understanding is that the Downward API is used to configure the metadata of the POD or container, and the environment variables are used to define some regular variable parameters. Downward API supports environment variables and files, which is more flexible.
2. Kubernetes API server interaction In fact, this section mainly talks about how to use the Kubernetes API.]]></description>
</item><item>
    <title>七、ConfigMap and Secret configuration application</title>
    <link>https://yeliansong.github.io/en/2019-09-13-7-configmap-%E5%92%8C-secret%E9%85%8D%E7%BD%AE%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</link>
    <pubDate>Thu, 10 Oct 2019 14:11:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2019-09-13-7-configmap-%E5%92%8C-secret%E9%85%8D%E7%BD%AE%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</guid>
    <description><![CDATA[1. Configuration of container command line parameters Docker uses command line parameters by defining Entrypoint and CMD in Dockerfile, but there is a problem, this is packaged into the image. Let’s take a look at the difference between the two first.
Entrypoint: Defines the executable program that is invoked when the container starts.
CMD: Specifies the parameters passed to Entrypoint.
So the usual practice is to define these two. When starting with the command line, you can use the argu of the command line to override the definition of CMD in the file.]]></description>
</item><item>
    <title>六、Volume - mount the disk to the container</title>
    <link>https://yeliansong.github.io/en/2019-09-12-6-%E5%8D%B7-%E5%B0%86%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD%E5%88%B0%E5%AE%B9%E5%99%A8/</link>
    <pubDate>Thu, 03 Oct 2019 14:11:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2019-09-12-6-%E5%8D%B7-%E5%B0%86%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD%E5%88%B0%E5%AE%B9%E5%99%A8/</guid>
    <description><![CDATA[1. volume Finally waiting for you, volume, volume. It is also a very important component of kubernetes. No, it should not be said to be a component of k8s, it should be said to be a part of POD.
What problem is the volume used to solve? POD is actually equivalent to a logical host, and each POD may have multiple containers. We know that these containers are actually processes equivalent to logical hosts.]]></description>
</item><item>
    <title>五、POD service and communication</title>
    <link>https://yeliansong.github.io/en/2019-09-11-5-pod%E7%9A%84%E6%9C%8D%E5%8A%A1%E4%B8%8E%E9%80%9A%E4%BF%A1/</link>
    <pubDate>Tue, 01 Oct 2019 11:11:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2019-09-11-5-pod%E7%9A%84%E6%9C%8D%E5%8A%A1%E4%B8%8E%E9%80%9A%E4%BF%A1/</guid>
    <description><![CDATA[1. Service and port The service is actually easy to understand. Think about it, how do you manage a group of the same POD? Do you need to know all their IPs, and then manually configure and connect them one by one? Obviously not needed, how to solve this problem, use services, services are actually equivalent to a routing function.
Look at this, there are 3 PODs on the front end, and a Backend, how to make the whole system run normally, using services.]]></description>
</item><item>
    <title>四、Deploy managed POD by copy mechanism</title>
    <link>https://yeliansong.github.io/en/2019-09-11-4-%E5%89%AF%E6%9C%AC%E6%9C%BA%E5%88%B6%E9%83%A8%E7%BD%B2%E6%89%98%E7%AE%A1pod/</link>
    <pubDate>Tue, 17 Sep 2019 11:11:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2019-09-11-4-%E5%89%AF%E6%9C%AC%E6%9C%BA%E5%88%B6%E9%83%A8%E7%BD%B2%E6%89%98%E7%AE%A1pod/</guid>
    <description><![CDATA[1. Survival Probe Why come up with such a profound word? We know that if a container program in the POD crashes, kubenetes will restart the program, but the problem is, if it is not a crash, such as a deadlock, or throwing an exception, etc., what to do at this time, kubenetes does not know Whether your container is normal or not, you need to use a probe at this time.]]></description>
</item><item>
    <title>三、Containers running in Kubernetes</title>
    <link>https://yeliansong.github.io/en/2019-09-10-3-%E8%BF%90%E8%A1%8C%E4%BA%8Ekubernetes%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8/</link>
    <pubDate>Sun, 15 Sep 2019 11:16:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2019-09-10-3-%E8%BF%90%E8%A1%8C%E4%BA%8Ekubernetes%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8/</guid>
    <description><![CDATA[1. Why create a POD We know that POD is the smallest unit managed by Kubernetes. Why does Kubernetes not directly manage containers, but manage PODs? There is a reason for this. We know that a container is a single process. What does it mean? The design idea of a container is that each container only runs one process. If you use dry bernetes to directly manage these containers, it must be complicated, so I will do it The POD is introduced to realize resource and network isolation between containers.]]></description>
</item><item>
    <title>二、The use of Kubernetes and Docker</title>
    <link>https://yeliansong.github.io/en/2019-09-10-2-kubernetes-%E5%92%8Cdocker%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Wed, 11 Sep 2019 19:16:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2019-09-10-2-kubernetes-%E5%92%8Cdocker%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[1. Understanding Docker images, file systems and containers The image of the container is a file after packaging and compiling the container. The packaging image depends on the Dockerfile file. The From line defines the starting content of the image, which is the basic image for construction. The process of building the image is to upload the entire directory of files to the Docker guardian During the process, Docker will first pull the basic image from the basic image warehouse, and then the packaging of the image is a layered structure, with the basic image as a layer, and then each command will be used as a new layer, layer by layer , the whole is a joint file system.]]></description>
</item><item>
    <title>一、Introduction to Kubernetes</title>
    <link>https://yeliansong.github.io/en/2019-09-10-1%E4%B8%80kubernetes%E7%9A%84%E4%BB%8B%E7%BB%8D/</link>
    <pubDate>Tue, 10 Sep 2019 21:56:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://yeliansong.github.io/en/2019-09-10-1%E4%B8%80kubernetes%E7%9A%84%E4%BB%8B%E7%BB%8D/</guid>
    <description><![CDATA[1. Comparison between monolithic applications and microservices Disadvantages of monolithic applications: run on several servers in the form of a single process or several processes, the deployment cycle is long, and the operation and maintenance and development are disconnected. After the developers complete the development, they are packaged into a whole for operation and maintenance deployment.
There is no decoupling between modules. To modify a module, the whole package needs to be deployed.]]></description>
</item></channel>
</rss>
